const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const User = require("../models/User");
const crypto = require("crypto");
const axios = require("axios");
require("dotenv").config();

// ‚úÖ REGISTRACE
router.post("/register", async (req, res) => {
  const { username, email, password, role } = req.body;
  const registrationIp = req.ip;

  if (process.env.NODE_ENV === "development") {
    console.log("üì® P≈ô√≠choz√≠ data z frontendu:", { username, email, password, role });
  }

  if (!username || !email || !password || !role) {
    return res.status(400).json({ message: "Vypl≈àte v≈°echna pole" });
  }

  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: "U≈æivatel s t√≠mto jm√©nem u≈æ existuje." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const emailToken = crypto.randomBytes(32).toString("hex");

    const isBusiness = role === "business";

    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      role,
      registrationIp,
      emailVerificationToken: emailToken,
      emailVerified: process.env.SKIP_EMAIL === "true",
      ...(isBusiness && {
        subscriptionPlan: "free",
        allowedContacts: 2,
        contactsUsedThisMonth: 0,
        freePlanUsed: true,
        subscriptionStartDate: new Date(),
      }),
    });

    await newUser.save();

    if (process.env.SKIP_EMAIL !== "true") {
      await sendVerificationEmail(email, emailToken);
    }

    res.status(201).json({
      message:
        process.env.SKIP_EMAIL === "true"
          ? "Registrace √∫spƒõ≈°n√° (testovac√≠ re≈æim)"
          : "Registrace √∫spƒõ≈°n√°. Zkontrolujte e-mail.",
      data: { username, email, role },
    });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi registraci:", err);
    res.status(500).json({ message: "Chyba serveru", error: err.message });
  }
});

// ‚úÖ P≈òIHL√Å≈†EN√ç
router.post("/login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(401).json({ error: "U≈æivatel nenalezen" });
    }

    if (!user.emailVerified) {
      return res.status(403).json({ error: "Nejd≈ô√≠v ovƒõ≈ôte sv≈Øj e-mail." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: "Neplatn√© heslo" });
    }

    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({
      message: "P≈ôihl√°≈°en√≠ OK",
      token,
      data: { role: user.role, userId: user._id },
    });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠:", err);
    res.status(500).json({ error: "Chyba serveru" });
  }
});

// ‚úÖ Ovƒõ≈ôen√≠ e-mailu (opraveno)
router.get("/verify-email", async (req, res) => {
  const { token } = req.query;
console.log("üì© API /verify-email bylo zavol√°no");
console.log("Token:", req.query.token);

  if (!token) {
    return res.status(400).json({ message: "Token chyb√≠." });
  }

  try {
    const user = await User.findOne({ emailVerificationToken: token });

    if (!user) {
      return res.status(404).json({ message: "U≈æivatel nenalezen." });
    }

    if (user.emailVerified) {
      return res.json({ message: "E-mail ji≈æ byl ovƒõ≈ôen." });
    }

    user.emailVerified = true;
    user.emailVerificationToken = undefined;
    await user.save();

    return res.json({ message: "E-mail ovƒõ≈ôen." });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi ovƒõ≈ôen√≠ e-mailu:", err);
    return res.status(400).json({ message: "Neplatn√Ω nebo expirovan√Ω token." });
  }
});

// ‚úÖ Zapomenut√© heslo ‚Äì odesl√°n√≠ e-mailu
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: "Chyb√≠ e-mail." });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "U≈æivatel s t√≠mto e-mailem neexistuje." });
    }

    const token = crypto.randomBytes(32).toString("hex");
    user.resetPasswordToken = token;
    user.resetPasswordExpires = Date.now() + 1000 * 60 * 60;
    await user.save();

    const resetLink = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;

    if (process.env.NODE_ENV === "development") {
      console.log("üì® RESET LINK:", resetLink);
    }

    await axios.post(
      "https://api.resend.com/emails",
      {
        from: process.env.EMAIL_FROM,
        to: email,
        subject: "Obnoven√≠ hesla",
        html: `
          <h3>Obnoven√≠ hesla</h3>
          <p>Klikni na n√°sleduj√≠c√≠ odkaz pro nastaven√≠ nov√©ho hesla:</p>
          <a href="${resetLink}">${resetLink}</a>
          <p>Odkaz plat√≠ 1 hodinu.</p>
        `,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.RESEND_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    res.json({ message: "üìß E-mail pro obnoven√≠ hesla byl odesl√°n." });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ e-mailu:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi odes√≠l√°n√≠ e-mailu." });
  }
});

// ‚úÖ Reset hesla
router.post("/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;

  if (!token || !newPassword) {
    return res.status(400).json({ message: "Chyb√≠ token nebo nov√© heslo." });
  }

  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user) {
      return res.status(400).json({ message: "Token je neplatn√Ω nebo expiroval." });
    }

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    user.resetPasswordToken = null;
    user.resetPasswordExpires = null;

    await user.save();

    res.json({ message: "‚úÖ Heslo bylo √∫spƒõ≈°nƒõ zmƒõnƒõno." });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi resetu hesla:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi resetu hesla." });
  }
});

// ‚úÖ Odesl√°n√≠ ovƒõ≈ôovac√≠ho e-mailu
async function sendVerificationEmail(email, token) {
  const verifyUrl = `${process.env.FRONTEND_URL}/verify-email?token=${token}`;

  try {
    await axios.post(
      "https://api.resend.com/emails",
      {
        from: process.env.EMAIL_FROM,
        to: email,
        subject: "Ovƒõ≈ôen√≠ e-mailov√© adresy",
        html: `
          <h3>Potvrƒète sv≈Øj e-mail</h3>
          <p>Kliknƒõte na n√°sleduj√≠c√≠ odkaz pro ovƒõ≈ôen√≠ va≈°√≠ e-mailov√© adresy:</p>
          <a href="${verifyUrl}">${verifyUrl}</a>
        `,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.RESEND_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi odes√≠l√°n√≠ ovƒõ≈ôovac√≠ho e-mailu:", err.response?.data || err.message);
    throw new Error("Nepoda≈ôilo se odeslat ovƒõ≈ôovac√≠ e-mail.");
  }
}

module.exports = router;
