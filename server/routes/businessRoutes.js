// server/routes/businessRoutes.js
const express = require("express");
const router = express.Router();
const multer = require("multer");
const path = require("path");
const fs = require("fs");

const BusinessProfile = require("../models/BusinessProfile");

// Nastaven√≠ √∫lo≈æi≈°tƒõ pro profilov√© fotky
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = "uploads/business";
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${Date.now()}-${file.fieldname}${ext}`);
  },
});

const upload = multer({ storage });


// ‚úÖ Z√çSKAT PROFIL
router.get("/profile", (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Token chyb√≠' });

  require("jsonwebtoken").verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Neplatn√Ω token' });
    req.user = user;
    next();
  });
}, async (req, res) => {

  try {
    const BusinessProfile = require("../models/BusinessProfile");
const User = require("../models/User"); // üëà p≈ôidej naho≈ôe pokud tam nen√≠

const profile = await BusinessProfile.findOne({ userId: req.user.userId });
const user = await User.findById(req.user.userId);

if (!user) return res.status(404).json({ message: "U≈æivatel nenalezen" });

// Vrac√≠me obƒõ ƒç√°sti: business profil + tarif
res.json({
  user: {
    email: user.email,
    subscriptionPlan: user.subscriptionPlan,
    subscriptionCancelAt: user.subscriptionCancelAt,
subscriptionStartDate: user.subscriptionStartDate,

    // m≈Ø≈æe≈° p≈ôidat i dal≈°√≠ pole pokud chce≈°
  },
  profile,
});



  } catch (err) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ profilu:", err);
    res.status(500).json({ message: "Chyba serveru" });
  }
});

// ‚úÖ ULO≈ΩIT PROFIL
router.post("/profile", (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Token chyb√≠' });

  require("jsonwebtoken").verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Neplatn√Ω token' });
    req.user = user;
    next();
  });
}, upload.single("photo"), async (req, res) => {

  try {console.log("üßæ Z√≠skan√° data z req.body:", req.body);
       console.log("üñºÔ∏è Nahran√° fotka:", req.file);


    const { name, website, igProfile, fbProfile, ttProfile, bio, location, businessField } = req.body;

    let profile = await BusinessProfile.findOne({ userId: req.user.userId });

    if (!profile) {
      profile = new BusinessProfile();
      profile.userId = req.user.userId; // ‚úÖ D≈ÆLE≈ΩIT√â!
    }

    profile.name = name;
    profile.website = website;
    profile.igProfile = igProfile;
    profile.fbProfile = fbProfile;
    profile.ttProfile = ttProfile;
    profile.bio = bio;
    profile.location = location;
    profile.businessField = businessField;

    if (req.file) {
      profile.photoUrl = "/" + path.posix.join("uploads", "business", req.file.filename);
    }

    await profile.save();
    res.json({ message: "Profil ulo≈æen", profile });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi ukl√°d√°n√≠ profilu:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi ukl√°d√°n√≠" });
  }
});
// ‚úÖ Vr√°tit zb√Ωvaj√≠c√≠ kontakty u≈æivatele (vƒçetnƒõ override)
router.get("/remaining-contacts", (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Token chyb√≠" });

  require("jsonwebtoken").verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: "Neplatn√Ω token" });
    req.user = user;
    next();
  });
}, async (req, res) => {
  try {
    const User = require("../models/User");
    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({ message: "U≈æivatel nenalezen" });
    }

    const used = user.contactsUsedThisMonth ?? 0;
    const allowed = user.allowedContacts ?? 0;
    const override = user.remainingContactOverride;

    const remaining = override !== null && override !== undefined
      ? override
      : allowed - used;

    res.json({ remainingContacts: remaining });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ zb√Ωvaj√≠c√≠ch kontakt≈Ø:", err);
    res.status(500).json({ message: "Chyba serveru p≈ôi naƒç√≠t√°n√≠ kontakt≈Ø" });
  }
});

// ‚úÖ Ve≈ôejn√Ω profil podniku podle ID
router.get("/public/business/:id", async (req, res) => {
  try {
    const BusinessProfile = require("../models/BusinessProfile");
    const profile = await BusinessProfile.findOne({ userId: req.params.id });

    if (!profile) return res.status(404).json({ message: "Profil nenalezen" });

    // Vrac√≠me jen ve≈ôejn√© informace
    res.json({
      profile: {
        name: profile.name,
        website: profile.website,
        igProfile: profile.igProfile,
        fbProfile: profile.fbProfile,
        ttProfile: profile.ttProfile,
        bio: profile.bio,
        location: profile.location,
        businessField: profile.businessField,
        photoUrl: profile.photoUrl,
      },
    });
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ve≈ôejn√©ho profilu:", err);
    res.status(500).json({ message: "Chyba serveru" });
  }
});



module.exports = router;
